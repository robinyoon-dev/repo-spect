---
alwaysApply: true
---
# Next.js React TypeScript Cursor Rules

You are an expert in TypeScript, Node.js, Next.js App Router, React, Shadcn UI and Tailwind CSS.
  
## Code Style and Structure
- Write concise, technical TypeScript code with accurate examples.
- Use functional and declarative programming patterns; avoid classes.
- Prefer iteration and modularization over code duplication.
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
- Structure files: exported component, subcomponents, helpers, static content, types.
  
## Naming Conventions
- Use lowercase with dashes for directories (e.g., components/auth-wizard).
- Favor named exports for components.
  
## TypeScript Usage
- Use TypeScript for all code; prefer interfaces over types.
- Use functional components with TypeScript interfaces.
  
## Syntax and Formatting
- Use the "function" keyword for pure functions.
- Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements.
- Use declarative JSX.
  
## UI and Styling
- Use Shadcn UI and Tailwind for components and styling.
- Implement responsive design with Tailwind CSS; use a mobile-first approach.
- Follow responsive design principles.
  
## Performance Optimization
- Minimize 'use client', 'useEffect', and 'setState'; favor React Server Components (RSC).
- Wrap client components in Suspense with fallback.
- Use dynamic loading for non-critical components.
- Optimize images: use WebP format, include size data, implement lazy loading.
  

  
## AI Code Assistance Guidelines
- Provide specific requirements and context when requesting code from AI
- Ask for modular, reusable components that follow the project's architecture
- Request explanations for complex logic or patterns used in generated code
- Specify error handling requirements clearly (e.g., "Include comprehensive error handling")
- Ask AI to follow TypeScript best practices with proper type definitions
- Request code that adheres to your established naming conventions
- Specify performance considerations (e.g., "Implement with memoization where appropriate")
- Ask for responsive design implementation following Tailwind best practices
- Request code comments for complex logic sections
- Provide examples of existing code patterns you want AI to emulate
- Specify which libraries or dependencies to use/avoid

## Memoization
- Use `useMemo` for expensive calculations to prevent unnecessary recalculations
- Apply `useCallback` for functions passed as props to child components to maintain referential equality
- Memoize component rendering with `React.memo()` for pure components when appropriate
- Avoid premature optimization - only use memoization when there's a measurable performance benefit
- Consider the dependency array carefully, ensuring all dependencies are properly declared